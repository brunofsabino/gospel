// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  name                  String
  email                 String                  @unique
  password              String
  avatar                String?
  Comment               CommentInPost[]
  likesInComment        LikeInComment[]
  Forum                 Forum[]
  CommentInForum        CommentInForum[]
  LikeInForum           LikeInForum[]
  responseComment       ResponseComment[]
  LikeInResponseComment LikeInResponseComment[]

  @@map("users")
}

model UserADM {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  Post     Post[]

  @@map("userAdm")
}

model Post {
  id                    String                  @id @default(uuid())
  contentP1             String
  contentP2             String?
  contentP3             String?
  contentP4             String?
  contentP5             String?
  contentP6             String?
  contentP7             String?
  contentPreComment     String
  date                  DateTime                @default(now())
  updatedIn             DateTime?
  title                 String
  subTitle              String
  mainNewsShow          Boolean                 @default(false)
  slideShow             Boolean                 @default(false)
  newsShow              Boolean                 @default(false)
  summaryParagraph      String
  qtComments            Int?
  img                   String?
  video                 String?
  userADMId             String
  userADM               UserADM                 @relation(fields: [userADMId], references: [id], onDelete: Cascade)
  Comment               CommentInPost[]
  likesInComment        LikeInComment[]
  responseComment       ResponseComment[]
  LikeInResponseComment LikeInResponseComment[]

  @@map("posts")
}

model CommentInPost {
  id                     String            @id @default(uuid())
  post_id                String
  user_id                String
  nameUserInComment      String
  imgUserInComment       String
  date                   DateTime          @default(now())
  comment                String
  id_commentReply        String?
  nameUserReplyComment   String?
  imgUserReplyComment    String?
  userNameCommentReply   String?
  userAvatarCommentReply String?
  qtLikes                Int?
  dateCommentReply       DateTime?
  commentReply           String?
  postId                 Post              @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId                 User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likesInComment         LikeInComment[]
  responseComment        ResponseComment[]

  @@map("comments")
}

model ResponseComment {
  id                     String        @id @default(uuid())
  post_id                String
  user_id                String
  id_comment             String
  nameUser               String
  imgUser                String
  userNameCommentReply   String
  userAvatarCommentReply String
  userCommentReply       String?
  dateCommentReply       DateTime
  qtLikes                Int?
  date                   DateTime      @default(now())
  comment_response       String
  postId                 Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId                 User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentId              CommentInPost @relation(fields: [id_comment], references: [id], onDelete: Cascade)

  likesInComment LikeInResponseComment[]

  @@map("response_comments")
}

model LikeInComment {
  id         String        @id @default(uuid())
  post_id    String
  user_id    String
  comment_id String        @unique
  done       Boolean       @default(true)
  postId     Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentId  CommentInPost @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@map("likeInComments")
}

model LikeInResponseComment {
  id                String          @id @default(uuid())
  post_id           String
  user_id           String
  comment_id        String          @unique
  done              Boolean         @default(true)
  postId            Post            @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentResponseId ResponseComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@map("likeInResponseComments")
}

model Forum {
  id             String           @id @default(uuid())
  title          String
  description    String
  user_id        String
  userId         User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  CommentInForum CommentInForum[]
  LikeInForum    LikeInForum[]

  @@map("forums")
}

model CommentInForum {
  id               String        @id @default(uuid())
  id_comment_forum String?
  forum_id         String
  user_id          String
  date             DateTime      @default(now())
  comment          String
  forumId          Forum         @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  LikeInForum      LikeInForum[]

  @@map("commentInForums")
}

model LikeInForum {
  id                String         @id @default(uuid())
  forum_id          String
  done              Boolean        @default(true)
  user_id           String
  commentInForum_id String         @unique
  forumId           Forum          @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId            User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentId         CommentInForum @relation(fields: [commentInForum_id], references: [id], onDelete: Cascade)

  @@map("likeInForums")
}
